# Pipeline for testing Azure VMSS self-hosted agents

parameters:

  - name: wait
    type: number
    default: 0
  - name: poolName
    type: string
    default: 'vmss'


trigger: none

schedules:
- cron: "0 * * * *"
  displayName: "test schedule"
  branches:
    include:
    - main
  always: true

stages:

- stage: 'Validate'
  pool:
    name: ${{ parameters.poolName }}
  displayName: "Validate Azure DevOps Agent"

  jobs:

  - job: test
    workspace:
      clean: all

    steps:

      - script: date
        displayName: 'start time'

      - script: echo "$AGENT_MACHINENAME"
        displayName: 'AGENT_MACHINENAME'

      - script: docker run hello-world
        displayName: 'Test docker container'

      - script: |
          set -x
          npm --version
          php -m
        displayName: 'Run some version checks'

      - script: |
          terraform version
        displayName: 'terraform version'

      - script: |
          packer version
        displayName: 'packer version'

      - script: |
          echo "See: https://github.com/microsoft/azure-pipelines-agent/issues/3461"
          echo $PATH
          echo "validate that /opt/pipx_bin exists in $PATH"
          echo $PATH | grep -o "/opt/pipx_bin"
        displayName: 'issue 3461 test'

      - script: |
          ansible --version
        displayName: 'ansible --version'

      - script: |
          pwsh --version
        displayName: 'pwsh --version'

      - script: |
          az version
        displayName: 'az version'

      - script: |
          whoami
        displayName: 'whoami'

      - script: |
          sudo whoami
        displayName: 'whoami now'

      - script: |
          printenv
        displayName: 'debug environment'

      - script: |
          # https://docs.microsoft.com/en-us/azure/virtual-machines/linux/instance-metadata-service?tabs=linux
          curl -H Metadata:true "http://169.254.169.254/metadata/instance?api-version=2021-12-13" | jq
        displayName: 'get metadata'

      - ${{ if gt(parameters.wait, 0) }}:
        - script: |
            sleep "${{ parameters.wait }}"
          displayName: "Wait"

      - script: date
        displayName: 'end time'
