---

# Pipeline for simple Terraform testing Azure VMSS self-hosted agents
# to keep things as simple as possible we will not be using remote state,
# state will only exist during pipeline execution the purpose of the pipeline
# is only to test using Terraform with VMSS and Managed identity

parameters:
  - name: poolName
    type: string
    default: 've-vmss'
  - name: backendServiceArm
    type: string
    default: 've-vmss'
    displayName: "AzureRm Service Connection Name"

variables:
  - name: workingDirectory
    value: $(System.DefaultWorkingDirectory)/terraform/example

trigger: none

stages:

  - stage: init
    pool:
      name: ${{ parameters.poolName }}
    displayName: "Terraform Init & Plan"

    jobs:

      - job: init_plan
        variables:
          ARM_USE_MSI: "true"
        displayName: 'Terraform Init & Plan'
        workspace:
          clean: all

        steps:

          - script: echo "$AGENT_MACHINENAME"
            displayName: 'AGENT_MACHINENAME'

          - task: AzureCLI@2
            inputs:
              scriptType: bash
              scriptLocation: inlineScript
              addSpnToEnvironment: true
              azureSubscription: '${{ parameters.backendServiceArm }}'
              inlineScript: |
                set -e

                subscription_id=$(az account show --query 'id' --output tsv)
                tenant_id=$(az account show --query 'tenantId' --output tsv)

                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;]$subscription_id"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;]$tenant_id"

            displayName: 'Set azure environment variables from service connection for ARM_USE_MSI'

          - script: |
              echo "ARM_SUBSCRIPTION_ID: $ARM_SUBSCRIPTION_ID"
              echo "ARM_TENANT_ID: $ARM_TENANT_ID"
              echo "##vso[task.setvariable variable=subscription_id;isOutput=true]$ARM_SUBSCRIPTION_ID"
              echo "##vso[task.setvariable variable=tenant_id;isOutput=true]$ARM_TENANT_ID"
              echo "##vso[task.setvariable variable=myStageVal;isOutput=true]this is a stage output variable"
            workingDirectory: '${{ variables.workingDirectory }}'
            displayName: 'set stage vars'
            name: arm_vars

          - script: |
              printf "terraform init\n"
              TF_IN_AUTOMATION=true terraform init -backend=false
            workingDirectory: '${{ variables.workingDirectory }}'
            displayName: 'terraform init'

          - script: |
              printf "terraform plan -out tfplan\n"
              TF_IN_AUTOMATION=true terraform plan -out tfplan
            workingDirectory: '${{ variables.workingDirectory }}'
            displayName: 'terraform plan'

          - script: |
              ls -al "${{ variables.workingDirectory }}"
            displayName: 'view directory contents'

          - task: Cache@2
            displayName: 'register plan cache'
            inputs:
              key: 'terraform | plan | "$(Agent.OS)" | "$(Build.BuildNumber)" | "$(Build.SourceVersion)"'
              path: $(System.DefaultWorkingDirectory)


  - stage: validate_plan
    pool: server
    displayName: "Validate Plan"

    jobs:

      - job: waitForValidation
        displayName: 'Review and approve terraform plan before resuming'
        timeoutInMinutes: 60

        steps:

          - task: ManualValidation@0
            displayName: 'Manually Validate Plan'
            timeoutInMinutes: 5
            inputs:
              notifyUsers: |
                example@example.com
              instructions: 'Please validate the "terraform plan" step before continuing'
              onTimeout: 'resume'


  - stage: apply
    pool:
      name: ${{ parameters.poolName }}
    displayName: "Terraform Apply"

    jobs:

      - job: apply
        variables:
          ARM_USE_MSI: "true"
          # hmm this only seems to work to the next stage? Reverting to repeating script in each stage.
          # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&tabs=bash#set-an-output-variable-for-use-in-future-stages
          # ARM_SUBSCRIPTION_ID: $[stageDependencies.init.init_plan.outputs['arm_vars.subscription_id']]
          # ARM_TENANT_ID: $[stageDependencies.init.init_plan.outputs['arm_vars.tenant_id']]

        pool:
          name: ${{ parameters.poolName }}
        displayName: 'Terraform Apply'
        timeoutInMinutes: 60

        steps:

          - script: echo "$AGENT_MACHINENAME"
            displayName: 'AGENT_MACHINENAME'

          - task: Cache@2
            displayName: 'get plan cache'
            inputs:
              key: 'terraform | plan | "$(Agent.OS)" | "$(Build.BuildNumber)" | "$(Build.SourceVersion)"'

          - task: AzureCLI@2
            inputs:
              scriptType: bash
              scriptLocation: inlineScript
              addSpnToEnvironment: true
              azureSubscription: '${{ parameters.backendServiceArm }}'
              inlineScript: |
                set -e

                subscription_id=$(az account show --query 'id' --output tsv)
                tenant_id=$(az account show --query 'tenantId' --output tsv)

                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;]$subscription_id"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;]$tenant_id"

            displayName: 'Set azure environment variables from service connection for ARM_USE_MSI'

          - script: |
              ls -al "${{ variables.workingDirectory }}"
            displayName: 'view directory contents'

          - script: |
              echo "ARM_SUBSCRIPTION_ID: $ARM_SUBSCRIPTION_ID"
              echo "ARM_TENANT_ID: $ARM_TENANT_ID"
              echo "ARM_USE_MSI: $ARM_USE_MSI"
              printf "terraform apply tfplan\n"
              TF_IN_AUTOMATION=true terraform apply tfplan
            workingDirectory: '${{ variables.workingDirectory }}'
            displayName: 'terraform apply'

          - task: Cache@2
            displayName: 'register apply cache'
            inputs:
              key: 'terraform | apply | "$(Agent.OS)" | "$(Build.BuildNumber)" | "$(Build.SourceVersion)"'
              path: $(System.DefaultWorkingDirectory)


  - stage: plan_destroy
    pool:
      name: ${{ parameters.poolName }}
    displayName: "Terraform Plan Destroy"

    jobs:

      - job: plan_destroy
        variables:
          ARM_USE_MSI: "true"
          # ARM_SUBSCRIPTION_ID: $[stageDependencies.init.init_plan.outputs['arm_vars.subscription_id']]
          # ARM_TENANT_ID: $[stageDependencies.init.init_plan.outputs['arm_vars.tenant_id']]
        pool:
          name: ${{ parameters.poolName }}
        displayName: 'Terraform Plan Destroy'
        timeoutInMinutes: 60

        steps:

          - script: echo "$AGENT_MACHINENAME"
            displayName: 'AGENT_MACHINENAME'

          - task: Cache@2
            displayName: 'get apply cache'
            inputs:
              key: 'terraform | apply | "$(Agent.OS)" | "$(Build.BuildNumber)" | "$(Build.SourceVersion)"'

          - task: AzureCLI@2
            inputs:
              scriptType: bash
              scriptLocation: inlineScript
              addSpnToEnvironment: true
              azureSubscription: '${{ parameters.backendServiceArm }}'
              inlineScript: |
                set -e

                subscription_id=$(az account show --query 'id' --output tsv)
                tenant_id=$(az account show --query 'tenantId' --output tsv)

                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;]$subscription_id"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;]$tenant_id"

            displayName: 'Set azure environment variables from service connection for ARM_USE_MSI'

          - script: |
              ls -al "${{ variables.workingDirectory }}"
            displayName: 'view directory contents'

          - script: |
              printf "terraform plan -destroy -out tfplan\n"
              TF_IN_AUTOMATION=true terraform plan -destroy -out tfplan
            workingDirectory: '${{ variables.workingDirectory }}'
            displayName: 'terraform plan -destroy'

          - task: Cache@2
            displayName: 'register apply cache'
            inputs:
              key: 'terraform | plan_destroy | "$(Agent.OS)" | "$(Build.BuildNumber)" | "$(Build.SourceVersion)"'
              path: $(System.DefaultWorkingDirectory)


  - stage: validate_plan_destroy
    pool: server
    displayName: "Validate Destroy"

    jobs:

      - job: waitForValidation
        displayName: 'Review and approve terraform destroy plan before resuming'
        timeoutInMinutes: 60

        steps:

          - task: ManualValidation@0
            displayName: 'Manually Validate Destroy'
            timeoutInMinutes: 5
            inputs:
              notifyUsers: |
                example@example.com
              instructions: 'Please validate the "terraform plan -destroy" step before continuing'
              onTimeout: 'resume'

  - stage: destroy
    pool:
      name: ${{ parameters.poolName }}
    displayName: "Terraform Destroy"

    jobs:

      - job: destroy
        variables:
          ARM_USE_MSI: "true"
          # ARM_SUBSCRIPTION_ID: $[stageDependencies.init.init_plan.outputs['arm_vars.subscription_id']]
          # ARM_TENANT_ID: $[stageDependencies.init.init_plan.outputs['arm_vars.tenant_id']]
        pool:
          name: ${{ parameters.poolName }}
        displayName: 'Terraform Destroy'
        timeoutInMinutes: 60

        steps:

          - script: echo "$AGENT_MACHINENAME"
            displayName: 'AGENT_MACHINENAME'

          - task: Cache@2
            displayName: 'get plan destroy cache'
            inputs:
              key: 'terraform | plan_destroy | "$(Agent.OS)" | "$(Build.BuildNumber)" | "$(Build.SourceVersion)"'

          - task: AzureCLI@2
            inputs:
              scriptType: bash
              scriptLocation: inlineScript
              addSpnToEnvironment: true
              azureSubscription: '${{ parameters.backendServiceArm }}'
              inlineScript: |
                set -e

                subscription_id=$(az account show --query 'id' --output tsv)
                tenant_id=$(az account show --query 'tenantId' --output tsv)

                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;]$subscription_id"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;]$tenant_id"

            displayName: 'Set azure environment variables from service connection for ARM_USE_MSI'

          - script: |
              ls -al "${{ variables.workingDirectory }}"
            displayName: 'view directory contents'

          - script: |
              printf "terraform apply tfplan\n"
              TF_IN_AUTOMATION=true terraform apply tfplan
            workingDirectory: '${{ variables.workingDirectory }}'
            displayName: 'terraform apply (destroy)'
